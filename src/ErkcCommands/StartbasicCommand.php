<?php

/**
 * This file is part of the PHP Telegram Bot example-bot package.
 * https://github.com/php-telegram-bot/example-bot/
 * (c) PHP Telegram Bot Team
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * Start command
 * Gets executed when a user first starts using the bot.
 * When using deep-linking, the parameter can be accessed by getting the command text.
 * @see https://core.telegram.org/bots#deep-linking
 */

namespace Longman\TelegramBot\Commands\SystemCommands;

use JakubOnderka\PhpParallelLint\Exception;
use Longman\TelegramBot\ChatAction;
use Longman\TelegramBot\Commands\SystemCommand;
use Longman\TelegramBot\Entities\BotCommand;
use Longman\TelegramBot\Entities\BotCommandScope\BotCommandScopeAllPrivateChats;
use Longman\TelegramBot\Entities\BotCommandScope\BotCommandScopeDefault;
use Longman\TelegramBot\Entities\InlineKeyboard;
use Longman\TelegramBot\Entities\InlineKeyboardButton;
use Longman\TelegramBot\Entities\Keyboard;
use Longman\TelegramBot\Entities\KeyboardButton;
use Longman\TelegramBot\Entities\ServerResponse;
use Longman\TelegramBot\Entities\WebAppInfo;
use Longman\TelegramBot\Exception\TelegramException;
use Longman\TelegramBot\Request;
use Longman\TelegramBot\TelegramLog;
use PHP_CodeSniffer\Config;
use Services\Erkc\Api;
use Services\Erkc\ErkcKeyboards;

class StartbasicCommand extends SystemCommand
{
    /**
     * @var string
     */
    protected $name = 'start_basic';

    /**
     * @var string
     */
    protected $description = 'Start_basic command';

    /**
     * @var string
     */
    protected $usage = '/start_basic';

    /**
     * @var string
     */
    protected $version = '1.2.0';

    /**
     * @var bool
     */
    protected $private_only = true;

    /**
     * Main command execution
     * @return ServerResponse
     * @throws TelegramException
     */
    public function execute(): ServerResponse
    {

        // If you use deep-linking, get the parameter like this:
        // $deep_linking_parameter = $this->getMessage()->getText(true);
        if ($message = $this->getMessage()) {
            $user_id = $message->getFrom()->getId();
            $message_id = $message->getMessageId();
            $getFirstName = $message->getFrom()->getFirstName();
            $getLastName = $message->getFrom()->getLastName();
            $chat_id = $message->getChat()->getId();

        } elseif ($callback_query = $this->getCallbackQuery()) {
            $user_id = $callback_query->getFrom()->getId();
            $message_id = $callback_query->getMessage()->getMessageId();
            $getFirstName = $callback_query->getFrom()->getFirstName();
            $getLastName = $callback_query->getFrom()->getLastName();
            $chat_id = $callback_query->getMessage()->getChat()->getId();
        }
        $result = Request::emptyResponse();
        $greetingMessage = '–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:';
        if (Api::is_registered($user_id)) {
            $keyboard = ErkcKeyboards::keyboardByRegisteredUser()->setResizeKeyboard(true)->setSelective(false);
        } else {
            $keyboard = ErkcKeyboards::getBasicKb()->setResizeKeyboard(true)->setSelective(false);
        }

        $result = Request::sendMessage([
            'chat_id' => $chat_id,
            'text' => $greetingMessage,
            'parse_mode' => 'html',
            'reply_markup' => $keyboard
        ]);

        return $result;

//        $message = $this->getMessage();
//        $chat_id = $message->getChat()->getId();


//        $data = [
//            'chat_id'      => $chat_id,
//            'text'=>'!',
//            // Remove any keyboard by default
//            'reply_markup' => Keyboard::remove(['selective' => true]),
//        ];
//        Request::sendMessage($data);
//        $keyboardWebApp = new Keyboard([
//            new InlineKeyboardButton([
//                'text' => "–£–ú–ü –ï–†–ö–¶",
//                'web_app' => new WebAppInfo([
//                    'url' => 'https://a8a3-217-18-136-10.ngrok-free.app/webapps/Erkc_v01/index.html'
//                ]),
//            ]),
//        ]);
//        $keyboardWebApp->setResizeKeyboard(TRUE);
//        Request::sendChatAction([
//            'chat_id' => $chat_id,
//            'action'  => ChatAction::TYPING,
//        ]);
//        $kbPersonalArea = new InlineKeyboard([
//            new InlineKeyboardButton([
//                'text' => "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –õ–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ üëâÔ∏è",
//                'url' => "http://vc.tom.ru/uinfo/lkspravka"
//            ]),
//        ]);


//        return $this->replyToUser(
//            '–í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —É—Å–ª—É–≥–∞–º–∏ –¥–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ –æ–ø–ª–∞—Ç–µ –ñ–ö–£ –∏ –ø–µ—Ä–µ–¥–∞—á–µ–π –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–æ–≤ –º–æ–∂–Ω–æ –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.' . "\n" .
//            '–î–ª—è —ç—Ç–æ–≥–æ –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∏–∂–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–∏—Ö –∫–≤–∏—Ç–∞–Ω—Ü–∏—è—Ö –Ω–∞ –æ–ø–ª–∞—Ç—É —É—Å–ª—É–≥.' . "\n" .
//            '<b>–î–ª—è —ç—Ç–æ–≥–æ –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å:</b>' . "\n" .
//            '  ‚úî –®—Ç—Ä–∏—Ö–∫–æ–¥ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ ' . "\n" .
//            '  ‚úî –í—ã–±—Ä–∞—Ç—å —É–ª–∏—Ü—É' . "\n" .
//            '  ‚úî –ù–æ–º–µ—Ä –¥–æ–º–∞' . "\n" .
//            '  ‚úî –ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã' . "\n" .
//            '‚Äº –í–∞–∂–Ω–æ, –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏, –Ω–æ –±–µ–∑ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π —Ç–∏–ø–∞: —É–ª., –ø–µ—Ä., –ø—Ä-—Ç –∏ —Ç.–¥. ‚Äº' . "\n\n" .
//            '–õ–∏–±–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–æ —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–º –∏–ª–∏ qr-–∫–æ–¥–æ–º –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ (–ø—Ä–∏–º–µ—Ä) —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–≤ –∏ qr-–∫–æ–¥–æ–≤ –∫–≤–∏—Ç–∞–Ω—Ü–∏–π.' . "\n\n" .
//            '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: /signup ',
//            [
//                'reply_markup' => Keyboard::remove(['selective' => true]),
//                'parse_mode' => 'html'
//            ]
//        );
    }
}
